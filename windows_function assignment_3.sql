-- 1.**Rank the customers based on the total amount they've spent on rentals.**

select customer_id , sum(amount) as rental_amt, 
rank() over(order by sum(amount) desc) as Cus_ranks from payment group by customer_id


-- 2. **Calculate the cumulative revenue generated by each film over time.**

select film_id, sum(rental_rate) as revenue, rental_duration,
dense_rank() over(partition by rental_duration  order by sum(rental_rate) desc) from film group by film_id

-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**

select film_id, length, avg(rental_duration) over(),
dense_rank() over(order by  length asc) from film 

-- 4. **Identify the top 3 films in each category based on their rental counts.**
 
 select distinct(title) as f_title,category_id,
 count(rental_id) over(partition by  title) rental_count from film f
 inner join film_category fc on fc.film_id = f.film_id
 inner join inventory i on i.film_id = fc.film_id 
 inner join rental r on r.inventory_id = i.inventory_id
 order by rental_count desc 
 
 -- 5. **Calculate the difference in rental counts between each customer's 
-- total rentals and the average rentals across all customers.**

select customer_id, count(rental_id) as total_rental,
count(rental_id)-lead(count(rental_id)) over(order by customer_id) as difference,
avg(count(rental_id)) over()
 from rental group by customer_id
 
 -- 6. **Find the monthly revenue trend for the entire rental store over time.**
 
select distinct(month(payment_date)) as Months, store_id,
sum(amount) over(partition by month(payment_date))as revenue_trend from payment p 
inner join rental r on r.rental_id = p.rental_id
inner join inventory i on i.inventory_id = r.inventory_id
order by store_id

-- 7. **Identify the customers whose total spending on rentals falls within 
-- the top 20% of all customers.**

select distinct(concat(first_name," ", last_name)),rental_rate,round(100*rental_rate/sum(rental_rate) over(),4) as percentage from customer 
inner join rental on rental.customer_id = customer.customer_id
inner join inventory on inventory.inventory_id =  rental.inventory_id
inner join film on film.film_id =  inventory.film_id order by percentage desc



-- 8. **Calculate the running total of rentals per category, ordered by rental count.**

select distinct(category_id),sum(rental_rate) over(order by  category_id ) as running_total,
count(rental_id) over(order by category_id desc) as rental_count
from film inner join film_category on film.film_id = film_category.film_id 
inner join inventory on inventory.film_id = film_category.film_id
inner join rental on rental.inventory_id = inventory.inventory_id 




-- 9. **Find the films that have been rented less than the average rental count 
-- for their respective categories.**

select title,count(rental_id) as rental_count, avg(count(rental_id)) over(),
case when count(rental_id) < avg(count(rental_id)) over() then "less then avg" else "greater then avg" end count_statu
from film left join inventory on film.film_id = inventory.film_id
left join rental on rental.inventory_id = inventory.inventory_id  group by title order by rental_count

-- Note: pls share the correct query for questionNo:9

-- 10. **Identify the top 5 months with the highest revenue and 
-- display the revenue generated in each month.**

select month(payment_date) as months,sum(amount) as revenue_amt 
from payment group by months order by revenue_amt desc limit 5